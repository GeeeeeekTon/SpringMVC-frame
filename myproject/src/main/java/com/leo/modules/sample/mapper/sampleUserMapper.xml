<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 
     autogenerate V1.0 by leo
-->
<mapper namespace="com.leo.modules.sample.dao.SampleUserMapper">
	<!-- 返回结果Map -->
	<resultMap type="com.leo.modules.sample.model.SampleUser" id="BaseResultMap">
		<id property="id" column="id" javaType="java.lang.Long" jdbcType="BIGINT"/>
		<result property="loginName" column="login_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="password" column="password" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="loginDate" column="login_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="type" column="type" javaType="java.lang.Integer" jdbcType="INTEGER"/>
		<result property="isValid" column="is_valid" javaType="java.lang.Integer" jdbcType="INTEGER"/>
		<result property="createDate" column="create_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="createUser" column="create_user" javaType="java.lang.Long" jdbcType="BIGINT"/>
		<result property="updateDate" column="update_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="updateUser" column="update_user" javaType="java.lang.Long" jdbcType="BIGINT"/>
	</resultMap>
	<!--表名-->
	<sql id="table_name">da_retrain_sample_user</sql>
	<!--查询字段集合-->
	<sql id="Base_Column_List">
	id,
	login_name,
	password,
	login_date,
	type,
	is_valid,
	create_date,
	create_user,
	update_date,
	update_user
	</sql>
	<!--查询字段-->
	<sql id="Base_Column_List_asType">
	id as "id",
	login_name as "loginName",
	password as "password",
	login_date as "loginDate",
	type as "type",
	is_valid as "isValid",
	create_date as "createDate",
	create_user as "createUser",
	update_date as "updateDate",
	update_user as "updateUser"
	</sql>
	<!-- 根据主键查询用户 -->
	<select id="load" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from <include refid="table_name" />
		where id = #{id,jdbcType=BIGINT}
	</select>
	<!-- 根据条件查询用户（带分页） -->
	<select id="selectByPage" resultMap="BaseResultMap" parameterType="com.leo.modules.sample.model.SampleUser">
		select
		<include refid="Base_Column_List" />
		from <include refid="table_name" />
		where 1=1
			<if test="loginName != null">
			 and login_name=#{loginName,jdbcType=VARCHAR}
			</if>
			<if test="password != null">
			 and password=#{password,jdbcType=VARCHAR}
			</if>
			<if test="loginDate != null">
			 and login_date=#{loginDate,jdbcType=TIMESTAMP}
			</if>
			<if test="type != null">
			 and type=#{type,jdbcType=INTEGER}
			</if>
			<if test="isValid != null">
			 and is_valid=#{isValid,jdbcType=INTEGER}
			</if>
			<if test="createDate != null">
			 and create_date=#{createDate,jdbcType=TIMESTAMP}
			</if>
			<if test="createUser != null">
			 and create_user=#{createUser,jdbcType=BIGINT}
			</if>
			<if test="updateDate != null">
			 and update_date=#{updateDate,jdbcType=TIMESTAMP}
			</if>
			<if test="updateUser != null">
			 and update_user=#{updateUser,jdbcType=BIGINT}
			</if>
		order by id desc
	</select>
	<!-- 根据主键删除用户 -->
	<delete id="delete" parameterType="java.lang.Long">
		delete from <include refid="table_name" />
		where id = #{id,jdbcType=BIGINT}
  	</delete>
	
	<!-- 增加一个实体 -->
	<insert id="insert" parameterType="com.leo.modules.sample.model.SampleUser">
		INSERT INTO <include refid="table_name" /> 
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="loginName != null">
				login_name,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="loginDate != null">
				login_date,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="isValid != null">
				is_valid,
			</if>
			<if test="createDate != null">
				create_date,
			</if>
			<if test="createUser != null">
				create_user,
			</if>
			<if test="updateDate != null">
				update_date,
			</if>
			<if test="updateUser != null">
				update_user
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="loginName != null">
				#{loginName},
			</if>
			<if test="password != null">
				#{password},
			</if>
			<if test="loginDate != null">
				#{loginDate},
			</if>
			<if test="type != null">
				#{type},
			</if>
			<if test="isValid != null">
				#{isValid},
			</if>
			<if test="createDate != null">
				#{createDate},
			</if>
			<if test="createUser != null">
				#{createUser},
			</if>
			<if test="updateDate != null">
				#{updateDate},
			</if>
			<if test="updateUser != null">
				#{updateUser}
			</if>
		</trim>
		<selectKey keyProperty="id" resultType="long" order="AFTER">
			SELECT LAST_INSERT_ID() 
		</selectKey>
	</insert>
	<!-- 更新一个实体 -->
	<update id="update" parameterType="com.leo.modules.sample.model.SampleUser">
		UPDATE <include refid="table_name" /> 
		<set>
			<if test="loginName != null">
				login_name=#{loginName},
			</if>
			<if test="password != null">
				password=#{password},
			</if>
			<if test="loginDate != null">
				login_date=#{loginDate},
			</if>
			<if test="type != null">
				type=#{type},
			</if>
			<if test="isValid != null">
				is_valid=#{isValid},
			</if>
			<if test="createDate != null">
				create_date=#{createDate},
			</if>
			<if test="createUser != null">
				create_user=#{createUser},
			</if>
			<if test="updateDate != null">
				update_date=#{updateDate},
			</if>
			<if test="updateUser != null">
				update_user=#{updateUser}
			</if>
		</set>
		WHERE id =#{id}  
	</update>
	<!-- 查询全部 -->
	<select id="selectAll"  resultMap="BaseResultMap">
		SELECT * FROM <include refid="table_name" />
	</select>
  	<!-- 统计全部 -->
	<select id="countAll"  resultType="int">
		SELECT count(1) FROM <include refid="table_name" />
	</select>
	<!--Notice:$要自己保证入参合法性，以防止sql注入-->
	<!--common:入参 sql 出参：map-->
	<select id="commonSelectBySql" resultMap="BaseResultMap" parameterType="com.leo.core.mybase.CommonDto">
		${sql}
	</select>  
	<select id="commonCountBySql" resultType="int" parameterType="com.leo.core.mybase.CommonDto">
		${sql}
	</select>
	<select id="commonBySqlPage" resultMap="BaseResultMap" parameterType="com.leo.core.mybase.CommonDto">
		${sql}
	</select> 	
</mapper>
	 
